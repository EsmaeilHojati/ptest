from asynchat import async_chat

import mxnet as mx
from mxnet import gluon,autograd,nd
data_ctx=mx.gpu(0)
model_ctx=mx.gpu(0)
#%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt


num_inputs=1
num_output=1
num_examples = 10000

def real_fn(X):
    return X[:, 0]*X[:, 0]- 2 * X[:, 0]

X = nd.random_normal(shape=(num_examples, num_inputs))*50
noise = nd.random_normal(shape=(num_examples,))
Y = real_fn(X) + noise

batch_size = 10
train_data = gluon.data.DataLoader(gluon.data.ArrayDataset(X, Y),
                                      batch_size=batch_size, shuffle=True)

from mxnet import gluon
from mxnet.gluon import nn
net = nn.HybridSequential()
with net.name_scope():
    net.add(nn.Dense(10, in_units=1,activation='relu'))
    net.add(nn.Dense(10,activation='relu'))
    net.add(nn.Dense(10,activation='relu'))
    net.add(nn.Dense(10,activation='relu'))
    net.add(nn.Dense(1))
net.collect_params().initialize(mx.init.Xavier(), ctx=model_ctx)
net.hybridize()

example_data = nd.array([[4]],ctx=data_ctx)
net(example_data)

square_loss = gluon.loss.L2Loss()

#schedule = mx.lr_scheduler.MultiFactorScheduler(step=steps_iterations, factor=0.1)
schedule = mx.lr_scheduler.FactorScheduler(step=500, factor=0.9)
sgd_optimizer = mx.optimizer.Adam(learning_rate=0.003, lr_scheduler=schedule)

trainer = gluon.Trainer(net.collect_params(), optimizer=sgd_optimizer)

epochs = 50
loss_sequence = []
num_batches = num_examples / batch_size

for e in range(epochs):
    cumulative_loss = 0
    # inner loop
    for i, (data, label) in enumerate(train_data):
        data = data.as_in_context(model_ctx)
        label = label.as_in_context(model_ctx)
        with autograd.record():
            output = net(data)
            loss = square_loss(output, label)
        loss.backward()
        trainer.step(batch_size)
        cumulative_loss += nd.mean(loss).asscalar()
    print("Epoch %s, loss: %s" % (e, cumulative_loss / num_examples))
    loss_sequence.append(cumulative_loss)

plt.figure(num=None,figsize=(8,6))
plt.plot(loss_sequence)
plt.grid(True,which='both')
plt.xlabel('epoch',fontsize=14)
plt.ylabel('average',fontsize=14)

plt.waitforbuttonpress()

plt.figure(num=None,figsize=(8,6))
x=nd.array(range(100),ctx=data_ctx)-50
y=net(x).asnumpy().flatten()
x=x.asnumpy().flatten()
plt.scatter(x,y)
plt.waitforbuttonpress()

plt.figure(num=None,figsize=(8,6))
plt.scatter(X.asnumpy(),Y.asnumpy())
plt.waitforbuttonpress()
